function vload = mismatchratio_succ(data,Params)
% This function solves the successive mismatch optimization.
% 
% Created by JYI, 09/17/2020
%
%% Data preparation and algorithm configuration

MixMat = data.MixMat;
poolVload = data.poolVload;
mismatchratio_norm = Params.mismatchratio_norm;

[~,nSamp] = size(MixMat);
poolPos = find(poolVload > 0);
poolNeg = find(poolVload == 0);

MaxIter = 1;
tol = 1e-6;

%% 
x = MixMat'*poolVload;
y = poolVload;

for Iter=1:MaxIter
    
    x_prev = x;
    
    switch mismatchratio_norm
        case 'L1'
            % L1 norm
            cvx_begin quiet
                variable x_cvx(nSamp,1)
                minimize(norm((poolVload(poolPos,1) - MixMat(poolPos,:)*x_cvx) ./ y(poolPos,1),1))
                subject to
                    MixMat(poolNeg,:)*x_cvx == 0;
                    - x_cvx <= 0;
            cvx_end
            
        case 'L2'
            % L2 norm
            cvx_begin quiet
                variable x_cvx(nSamp,1)
                minimize(norm((poolVload(poolPos,1) - MixMat(poolPos,:)*x_cvx) ./ y(poolPos,1),2))
                subject to
                    MixMat(poolNeg,:)*x_cvx == 0;
                    - x_cvx <= 0;
            cvx_end
            
    end
    
    x = x_cvx;
    
    % update y
    y = MixMat*x; % without updating y
%     
    if norm(x-x_prev,2) < tol || norm(poolVload-MixMat*x,2) < tol
        break;
    end
    
end

vload = x;






end
